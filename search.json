[{"path":"https://hussein-mahfouz.github.io/flowcluster/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 flowcluster authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hussein Mahfouz. Author, maintainer. Robin Lovelace. Author.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mahfouz H, Lovelace R (2025). flowcluster: Cluster Origin-Destination Flow Data. R package version 0.2.1, https://hussein-mahfouz.github.io/flowcluster/.","code":"@Manual{,   title = {flowcluster: Cluster Origin-Destination Flow Data},   author = {Hussein Mahfouz and Robin Lovelace},   year = {2025},   note = {R package version 0.2.1},   url = {https://hussein-mahfouz.github.io/flowcluster/}, }"},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"flowcluster","dir":"","previous_headings":"","what":"Cluster Origin-Destination Flow Data","title":"Cluster Origin-Destination Flow Data","text":"goal flowcluster provide minimal functionality clustering origin-destination (OD) pairs, representing desire lines (flows). includes: Creating distance matrices OD pairs Passing distance matrices clustering algorithm","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Cluster Origin-Destination Flow Data","text":"can install released version flowcluster CRAN : development version GitHub : Load follows:","code":"install.packages(\"flowcluster\") # install.packages(\"devtools\") devtools::install_github(\"Hussein-Mahfouz/flowcluster\") library(flowcluster)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Cluster Origin-Destination Flow Data","text":"package provides function create distance matrix data frame OD pairs, pass matrix clustering algorithm. current distance matrix implementation flow distance flow dissimilarity measures described (Tao Thill 2016). See (Mahfouz et al. 2025) example package can used cluster flows applied transportation research.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"data-preparation","dir":"","previous_headings":"Usage","what":"Data preparation","title":"Cluster Origin-Destination Flow Data","text":"First, load flowcluster package sample data, project projected coordinate reference system (CRS). important accurate length calculations spatial operations. Next, add column containing length (meters) flow line. step also checks data projected CRS. Filter flows based minimum maximum length. code , filter flows keep 1 20 kilometers. , extract start end coordinates flow, assign unique IDs. needed subsequent distance calculations clustering.","code":"library(tidyverse) library(sf) library(tmap)  # Load sample flow data and project to metric CRS (e.g., EPSG:27700) flows_sf <- flows_leeds flows_sf <- st_transform(flows_sf, \"EPSG:27700\") # Add length (meters) to each flow line flows_sf <- add_flow_length(flows_sf) head(flows_sf, 5) Simple feature collection with 5 features and 4 fields Geometry type: LINESTRING Dimension:     XY Bounding box:  xmin: 419427.1 ymin: 443211.1 xmax: 443015 ymax: 448448 Projected CRS: OSGB36 / British National Grid # A tibble: 5 × 5   origin    destination count                             geometry length_m   <chr>     <chr>       <dbl>                     <LINESTRING [m]>    <dbl> 1 E02002330 E02002330      30   (439593.3 448448, 439593.3 448448)       0  2 E02002330 E02002331     366   (439593.3 448448, 443015 447640.9)    3516. 3 E02002330 E02002332       6 (439593.3 448448, 419427.1 446200.1)   20291. 4 E02002330 E02002333       2 (439593.3 448448, 420574.6 444971.5)   19334. 5 E02002330 E02002334      31 (439593.3 448448, 442341.2 443211.1)    5914. # Filter flows based on length (e.g., between 100 and 10000 meters) flows_sf <- filter_by_length(flows_sf, length_min = 1000, length_max = 20000) # Add start/end coordinates and unique flow IDs flows_sf <- add_xyuv(flows_sf) head(flows_sf, 5) Simple feature collection with 5 features and 9 fields Geometry type: LINESTRING Dimension:     XY Bounding box:  xmin: 420574.6 ymin: 443211.1 xmax: 443015 ymax: 448448 Projected CRS: OSGB36 / British National Grid # A tibble: 5 × 10   origin    destination count                    geometry length_m      x      y   <chr>     <chr>       <dbl>            <LINESTRING [m]>    <dbl>  <dbl>  <dbl> 1 E02002330 E02002331     366 (439593.3 448448, 443015 4…    3516. 4.40e5 4.48e5 2 E02002330 E02002333       2 (439593.3 448448, 420574.6…   19334. 4.40e5 4.48e5 3 E02002330 E02002334      31 (439593.3 448448, 442341.2…    5914. 4.40e5 4.48e5 4 E02002330 E02002335      17 (439593.3 448448, 434926.1…    6385. 4.40e5 4.48e5 5 E02002330 E02002336       5 (439593.3 448448, 424754.2…   15687. 4.40e5 4.48e5 # ℹ 3 more variables: u <dbl>, v <dbl>, flow_ID <chr>"},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"distance-matrix-calculation","dir":"","previous_headings":"Usage","what":"Distance Matrix calculation","title":"Cluster Origin-Destination Flow Data","text":"Calculate pairwise distance measure flows using coordinates. can adjust alpha beta change relative importance start end locations clustering process. Convert long-format distance table matrix, required clustering.","code":"# Compute pairwise flow distances (fd and fds columns) flows <- st_drop_geometry(flows_sf) distances <- flow_distance(flows, alpha = 1, beta = 1) # Create a distance matrix from the long-form distance data. Choose the column for distances you want to use. # The 'fds' column is the flow dissimilarity measure, and the 'fd' column is the flow distance measure. dmat <- distance_matrix(distances, distance_col = \"fds\") # check 1st couple of rows columns of the distance matrix head(dmat[1:2, 1:2]) E02002330_1-E02002331_2 E02002330_1-E02002333_4 E02002330_1-E02002331_2                0.000000                2.741081 E02002330_1-E02002333_4                2.741081                0.000000"},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"clustering","dir":"","previous_headings":"Usage","what":"Clustering","title":"Cluster Origin-Destination Flow Data","text":"Prepare weight vector, typically based “count” column (number trips, etc). data “count” column, can add one flows$count <- 1. Weights handy, otherwise matrix huge, replicate OD pair n times depending number observations . Unfortunately, ---box support adding weights clustering algorithms hdbscan optics, use {dbscan} now, support weights. Finally, cluster flows using DBSCAN. Adjust eps minPts control cluster tightness minimum cluster size. Cluster composition determined DBSCAN parameters.","code":"# Prepare weights for each flow (here we use the count column) wvec <- weight_vector(dmat, flows, weight_col = \"count\") # Cluster flows using DBSCAN flows_clustered <- cluster_flows_dbscan(dmat, wvec, flows, eps = 8, minPts = 70)  # View the first few rows of the clustered data head(flows_clustered, 10) # A tibble: 10 × 10    origin destination count length_m      x      y      u      v flow_ID cluster    <chr>  <chr>       <dbl>    <dbl>  <dbl>  <dbl>  <dbl>  <dbl> <chr>     <int>  1 E0200… E02002331     366    3516. 4.40e5 4.48e5 4.43e5 4.48e5 E02002…       1  2 E0200… E02002333       2   19334. 4.40e5 4.48e5 4.21e5 4.45e5 E02002…       0  3 E0200… E02002334      31    5914. 4.40e5 4.48e5 4.42e5 4.43e5 E02002…       0  4 E0200… E02002335      17    6385. 4.40e5 4.48e5 4.35e5 4.44e5 E02002…       0  5 E0200… E02002336       5   15687. 4.40e5 4.48e5 4.25e5 4.43e5 E02002…       0  6 E0200… E02002341       9   12306. 4.40e5 4.48e5 4.29e5 4.42e5 E02002…       0  7 E0200… E02002344       7   11883. 4.40e5 4.48e5 4.31e5 4.40e5 E02002…       0  8 E0200… E02002345       1   14937. 4.40e5 4.48e5 4.27e5 4.40e5 E02002…       0  9 E0200… E02002346       2   16966. 4.40e5 4.48e5 4.25e5 4.39e5 E02002…       0 10 E0200… E02002347       3   13534. 4.40e5 4.48e5 4.30e5 4.39e5 E02002…       0 # how many unique clusters were found? length(unique(flows_clustered$cluster)) [1] 317 # number of flows in each cluster flows_clustered |>   group_by(cluster) |>   summarise(n = n()) |>   arrange(desc(n)) # A tibble: 317 × 2    cluster     n      <int> <int>  1       0  8652  2      14   179  3       4    62  4     104    57  5     187    56  6      28    42  7       2    35  8      74    29  9     228    29 10       6    26 # ℹ 307 more rows"},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"visualise","dir":"","previous_headings":"Usage","what":"Visualise","title":"Cluster Origin-Destination Flow Data","text":"Let’s take look clusters Add geometry back onto data  package also function test different combinations input parameters (eps minPts) see clustering changes. can useful preliminary sensitivity analysis. Let’s plot output plot shows number origin-destination pairs cluster. facet, bar represents cluster, height bar indicates number origin-destination pairs cluster. Many parameter (minPts eps) combinations returned clusters, combinations return clusters shown plot. Depending analysis done, proceed promising combinations, visualise done map , choose one makes sense .","code":"# Keep only the biggest clusters for visualisation flows_clustered <- flows_clustered |>   filter(cluster != 0) |> # these are normally the noisepoints   group_by(cluster) |>   mutate(     size = n(),     count_cluster = sum(count)   ) |>   ungroup() |>   filter(     size > 7, # minimum size of cluster     count_cluster > 100   ) # minumum number of trips in cluster # Add the geometry back onto the data flows_clustered <- flows_sf |>   select(flow_ID) |>   inner_join(flows_clustered, by = \"flow_ID\") # plot tm_shape(flows_clustered) +   tm_lines(     lwd = \"count\",     col = \"cluster\",     palette = \"Accent\", # YlGn     # style = \"pretty\",     alpha = 1,     title.col = \"Cluster\",     title.lwd = \"No. of people\",     scale = 10,     legend.col.show = FALSE,     showNA = FALSE   ) +   tm_facets(     by = \"cluster\",     free.coords = FALSE,     nrow = 4,     showNA = FALSE   ) +   tm_layout(     fontfamily = \"Georgia\",     main.title = paste0(\"Clustered flows\"),     main.title.size = 1.1,     main.title.color = \"azure4\",     main.title.position = \"left\",     legend.outside = TRUE,     legend.outside.position = \"bottom\",     legend.stack = \"horizontal\",     # remove panel headers     # panel.show = FALSE,     frame = FALSE   ) -> cluster_results  cluster_results sensitivity_results <- dbscan_sensitivity(   flows = flows,   dist_mat = dmat,   options_epsilon <- c(1, 2, 5, 7.5, 9),   options_minpts <- c(50, 75, 100, 150) )  # show the results head(sensitivity_results) # A tibble: 6 × 4   id              cluster  size count_sum   <chr>             <int> <int>     <dbl> 1 eps_1_minpts_50       0  9274     80815 2 eps_1_minpts_50       1     1       366 3 eps_1_minpts_50       2     1        71 4 eps_1_minpts_50       3     1        61 5 eps_1_minpts_50       4     1        82 6 eps_1_minpts_50       5     1       342 # number of clusters with more than five od pairs: sensitivity_results %>%   filter(size > 5) %>%   group_by(id) %>%   summarise(     no_of_clusters = n(),     total_count = sum(count_sum)   ) %>%   ungroup() %>%   arrange(desc(no_of_clusters)) # A tibble: 20 × 3    id                 no_of_clusters total_count    <chr>                       <int>       <dbl>  1 eps_7.5_minpts_50              47       82404  2 eps_9_minpts_75                47       98085  3 eps_9_minpts_50                46       85491  4 eps_9_minpts_100               28      105479  5 eps_7.5_minpts_75              26       94718  6 eps_7.5_minpts_100             22      102502  7 eps_9_minpts_150               18      113117  8 eps_7.5_minpts_150             14      110810  9 eps_5_minpts_50                 6       80175 10 eps_5_minpts_75                 4       93612 11 eps_5_minpts_100                3      102246 12 eps_1_minpts_100                1      102797 13 eps_1_minpts_150                1      111862 14 eps_1_minpts_50                 1       80815 15 eps_1_minpts_75                 1       94111 16 eps_2_minpts_100                1      102797 17 eps_2_minpts_150                1      111862 18 eps_2_minpts_50                 1       80815 19 eps_2_minpts_75                 1       94111 20 eps_5_minpts_150                1      111443 sensitivity_results %>%   filter(cluster != 0) %>%   group_by(id) %>%   mutate(clusters = n()) %>%   # How many clusters have more than 5 od pairs in them?   mutate(clusters = sum(size > 5)) %>%   ungroup() %>%   filter(clusters > 5) %>%   ggplot(aes(x = cluster, y = size, fill = count_sum)) +   geom_col() +   scale_y_continuous(trans = \"log10\") +   facet_wrap(~id, scales = \"fixed\") +   labs(     title = \"Sensitivity analysis for clustering - Varying {eps} and {minPts}\",     subtitle = \"Parameter combinations that returned more than 1 cluster\",     x = \"Cluster no.\",     y = \"No. of od pairs in cluster\",     fill = \"No. of \\ncommuters\"   ) +   theme_bw()"},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"aggregating-clustered-desire-lines","dir":"","previous_headings":"","what":"Aggregating clustered desire lines","title":"Cluster Origin-Destination Flow Data","text":"clustering, may want aggregate flows cluster single line representing average flow direction magnitude. can useful visualisation analysis. package function , creates linestring cluster based average start end coordinates flows cluster. Let’s visualise aggregated flows overlaid original flows.","code":"# Aggregate clustered flows into single linesting per cluster flows_aggregated <- aggregate_clustered_flows(flows_clustered,                                               weight = \"count\")  # View the first few rows of the aggregated flows head(flows_aggregated, 5) Simple feature collection with 5 features and 7 fields Geometry type: LINESTRING Dimension:     XY Bounding box:  xmin: 420075 ymin: 433392.3 xmax: 442341.2 ymax: 448073.4 Projected CRS: OSGB36 / British National Grid # A tibble: 5 × 8   cluster count_total  size       x       y       u       v     <int>       <dbl> <int>   <dbl>   <dbl>   <dbl>   <dbl> 1       2         418    35 441181. 448073. 430241. 433909. 2       4         604    62 420075. 445507. 430257. 433642. 3       6         321    26 442341. 443211. 430306. 433899. 4      11         223     9 424754. 443360. 430419. 433474. 5      14        2111   179 420372. 440279. 430621. 433392. # ℹ 1 more variable: geometry <LINESTRING [m]> tm_shape(flows_clustered) +   tm_lines(     lwd = \"count\",     col = \"grey30\",     alpha = 0.7,     title.lwd = \"No. of people (Original flows)\",     scale = 10,     legend.col.show = FALSE,     showNA = FALSE   ) +   tm_facets(     by = \"cluster\",     free.coords = FALSE,     nrow = 4,     showNA = FALSE) + tm_shape(flows_aggregated) +   tm_lines(     lwd = \"count_total\",     col = \"red\",     palette = \"Accent\", # YlGn     alpha = 1,     title.col = \"Cluster\",     title.lwd = \"No. of people (Representative linestring)\",     scale = 10,     legend.outside = TRUE,     legend.outside.position = \"bottom\"   ) +   tm_facets(     by = \"cluster\",     free.coords = FALSE,     nrow = 4,     showNA = FALSE) +   tm_layout(     fontfamily = \"Georgia\",     main.title = paste0(\"Aggregating flows to representative linestrings per cluster\"),     main.title.size = 1.1,     main.title.color = \"azure4\",     main.title.position = \"left\",     legend.outside = TRUE,     legend.outside.position = \"bottom\",     legend.stack = \"horizontal\",   ) -> flows_aggregated_map  flows_aggregated_map"},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"future-work","dir":"","previous_headings":"","what":"Future Work","title":"Cluster Origin-Destination Flow Data","text":"Add distance matrices (e.g. Frechet distance) Add clustering algorithms, use efficient data structure workaround able use weights clustering algorithms","code":""},{"path":[]},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Unique IDs to Flows (internal) Internal helper for assigning unique IDs to flows based on spatial columns. Used by add_xyuv() — add_flow_ids","title":"Assign Unique IDs to Flows (internal) Internal helper for assigning unique IDs to flows based on spatial columns. Used by add_xyuv() — add_flow_ids","text":"Assign Unique IDs Flows (internal) Internal helper assigning unique IDs flows based spatial columns. Used add_xyuv()","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Unique IDs to Flows (internal) Internal helper for assigning unique IDs to flows based on spatial columns. Used by add_xyuv() — add_flow_ids","text":"","code":"add_flow_ids(x)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Unique IDs to Flows (internal) Internal helper for assigning unique IDs to flows based on spatial columns. Used by add_xyuv() — add_flow_ids","text":"x tibble origin, destination, x, y, u, v columns","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Unique IDs to Flows (internal) Internal helper for assigning unique IDs to flows based on spatial columns. Used by add_xyuv() — add_flow_ids","text":"tibble flow_ID column","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Length Column to Flow Data — add_flow_length","title":"Add Length Column to Flow Data — add_flow_length","text":"Also checks 'origin' 'destination' columns present.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Length Column to Flow Data — add_flow_length","text":"","code":"add_flow_length(x)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Length Column to Flow Data — add_flow_length","text":"x sf object flows (LINESTRING, projected CRS)","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Length Column to Flow Data — add_flow_length","text":"sf object additional length_m column (od length meters)","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Length Column to Flow Data — add_flow_length","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows <- add_flow_length(flows)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_xyuv.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Start/End Coordinates & Flow IDs — add_xyuv","title":"Add Start/End Coordinates & Flow IDs — add_xyuv","text":"Add Start/End Coordinates & Flow IDs","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_xyuv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Start/End Coordinates & Flow IDs — add_xyuv","text":"","code":"add_xyuv(x)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_xyuv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Start/End Coordinates & Flow IDs — add_xyuv","text":"x sf object flows","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_xyuv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Start/End Coordinates & Flow IDs — add_xyuv","text":"tibble x, y, u, v, flow_ID columns","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_xyuv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Start/End Coordinates & Flow IDs — add_xyuv","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows <- add_flow_length(flows) flows <- add_xyuv(flows) #> Extracting start and end coordinates from flow geometries... #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE #> Adding x, y, u, v columns to flow data... #> Assigning unique flow IDs..."},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/aggregate_clustered_flows.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate clustered OD flows into representative lines — aggregate_clustered_flows","title":"Aggregate clustered OD flows into representative lines — aggregate_clustered_flows","text":"function aggregates flows within clusters creates single representative line cluster. start end coordinates computed weighted averages (weighted flow counts another variable), simple means weights provided. cluster represented one LINESTRING.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/aggregate_clustered_flows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate clustered OD flows into representative lines — aggregate_clustered_flows","text":"","code":"aggregate_clustered_flows(flows, weight = NULL, crs = sf::st_crs(flows))"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/aggregate_clustered_flows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate clustered OD flows into representative lines — aggregate_clustered_flows","text":"flows sf object containing OD flows coordinates origins (x, y) destinations (u, v), cluster column, optionally count weighting variable. weight (optional) Name column flows use weighting. NULL (default), unweighted means used. crs Coordinate reference system output (default: taken flows).","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/aggregate_clustered_flows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate clustered OD flows into representative lines — aggregate_clustered_flows","text":"sf object one line per cluster, containing: count_total: total weight (provided), otherwise number flows size: cluster size (input, recomputed) geometry: LINESTRING representing aggregated OD flow","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/aggregate_clustered_flows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate clustered OD flows into representative lines — aggregate_clustered_flows","text":"","code":"# ----- 1. Basic Usage: A quick, runnable example --- # This demonstrates the function with minimal, fast data preparation. flows <- flowcluster::flows_leeds  # Create the required input columns in a single, fast pipeline flows_clustered <- flows |>   add_xyuv() |>   # Manually create 3 dummy clusters for demonstration   dplyr::mutate(cluster = sample(1:3, size = nrow(flows), replace = TRUE)) |>   # The function requires a 'size' column, so we add it   dplyr::group_by(cluster) |>   dplyr::add_tally(name = \"size\") |>   dplyr::ungroup() #> Extracting start and end coordinates from flow geometries... #> Adding x, y, u, v columns to flow data... #> Assigning unique flow IDs...  # Demonstrate the function flows_agg_w <- aggregate_clustered_flows(flows_clustered, weight = \"count\") print(flows_agg_w) #> Simple feature collection with 3 features and 7 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.554577 ymin: 53.80406 xmax: -1.547084 ymax: 53.80727 #> Geodetic CRS:  WGS 84 #> # A tibble: 3 × 8 #>   cluster count_total  size     x     y     u     v                     geometry #>     <int>       <dbl> <int> <dbl> <dbl> <dbl> <dbl>             <LINESTRING [°]> #> 1       1       52412  3480 -1.55  53.8 -1.55  53.8 (-1.550539 53.80567, -1.549… #> 2       2       52227  3411 -1.55  53.8 -1.55  53.8 (-1.554577 53.80727, -1.551… #> 3       3       49308  3405 -1.55  53.8 -1.55  53.8 (-1.549737 53.80646, -1.547…  # ----- 2. Detailed Workflow (not run by default) --- if (FALSE) { # \\dontrun{   # This example shows the ideal end-to-end workflow, from raw data   # to clustering and finally aggregation. It is not run during checks   # because the clustering steps are too slow.    # a) Prepare the data by filtering and adding coordinates   flows_prep <- flowcluster::flows_leeds |>     sf::st_transform(3857) |>     add_flow_length() |>     filter_by_length(length_min = 5000, length_max = 12000) |>     add_xyuv()    # b) Calculate distances and cluster the flows   distances <- flow_distance(flows_prep, alpha = 1.5, beta = 0.5)   dmat <- distance_matrix(distances)   wvec <- weight_vector(dmat, flows_prep, weight_col = \"count\")   flows_clustered_real <- cluster_flows_dbscan(dmat, wvec, flows_prep, eps = 8, minPts = 70)    # c) Filter clusters and add a 'size' column   flows_clustered_real <- flows_clustered_real |>     dplyr::filter(cluster != 0) |> # Filter out noise points     dplyr::group_by(cluster) |>     dplyr::mutate(size = dplyr::n()) |>     dplyr::ungroup()    # d) Now, use the function on the clustered data   flows_agg_real <- aggregate_clustered_flows(flows_clustered_real, weight = \"count\")   print(flows_agg_real)    # e) Visualize the results   if (requireNamespace(\"tmap\", quietly = TRUE)) {     library(tmap)     # This plot uses modern tmap v4 syntax.     tm_shape(flows_clustered_real, facet = \"cluster\") +       tm_lines(col = \"grey50\", alpha = 0.5) +     tm_shape(flows_agg_real) +       tm_lines(col = \"red\", lwd = 2) +     tm_layout(title = \"Original Flows (Grey) and Aggregated Flows (Red)\")   } } # }"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/cluster_flows_dbscan.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster Flows using DBSCAN — cluster_flows_dbscan","title":"Cluster Flows using DBSCAN — cluster_flows_dbscan","text":"See dbscan details DBSCAN algorithm.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/cluster_flows_dbscan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster Flows using DBSCAN — cluster_flows_dbscan","text":"","code":"cluster_flows_dbscan(dist_mat, w_vec, x, eps, minPts)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/cluster_flows_dbscan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster Flows using DBSCAN — cluster_flows_dbscan","text":"dist_mat distance matrix w_vec weight vector x flows tibble flow_ID eps DBSCAN epsilon parameter minPts DBSCAN minPts parameter","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/cluster_flows_dbscan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster Flows using DBSCAN — cluster_flows_dbscan","text":"flows tibble additional cluster column","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/cluster_flows_dbscan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster Flows using DBSCAN — cluster_flows_dbscan","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows <- head(flows, 100) # for testing # Add flow lengths and coordinates flows <- add_flow_length(flows) # filter by length flows <- filter_by_length(flows, length_min = 5000, length_max = 12000) #> Flows remaining after filtering: 5 (5%) flows <- add_xyuv(flows) #> Extracting start and end coordinates from flow geometries... #> Adding x, y, u, v columns to flow data... #> Assigning unique flow IDs... # Calculate distances distances <- flow_distance(flows, alpha = 1.5, beta = 0.5) #> Adding coordinates data back onto the unique pairs ... dmat <- distance_matrix(distances) wvec <- weight_vector(dmat, flows, weight_col = \"count\") clustered <- cluster_flows_dbscan(dmat, wvec, flows, eps = 8, minPts = 70)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/dbscan_sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Sensitivity analysis of DBSCAN parameters for flow clustering. — dbscan_sensitivity","title":"Sensitivity analysis of DBSCAN parameters for flow clustering. — dbscan_sensitivity","text":"function allows test different combinations epsilon minPts parameters clustering flows using DBSCAN. can used determine parameter values make sense data","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/dbscan_sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sensitivity analysis of DBSCAN parameters for flow clustering. — dbscan_sensitivity","text":"","code":"dbscan_sensitivity(   dist_mat,   flows,   options_epsilon,   options_minpts,   w_vec = NULL )"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/dbscan_sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sensitivity analysis of DBSCAN parameters for flow clustering. — dbscan_sensitivity","text":"dist_mat precalculated distance matrix desire lines (output distance_matrix()) flows original flows tibble (must contain flow_ID 'count' column) options_epsilon vector options epsilon parameter options_minpts vector options minPts parameter w_vec Optional precomputed weight vector (otherwise computed internally 'count' column)","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/dbscan_sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sensitivity analysis of DBSCAN parameters for flow clustering. — dbscan_sensitivity","text":"tibble columns: id (identify eps minpts), cluster, size (number desire lines cluster), count_sum (total count per cluster)","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/dbscan_sensitivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sensitivity analysis of DBSCAN parameters for flow clustering. — dbscan_sensitivity","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows <- head(flows, 1000) # for testing # Add flow lengths and coordinates flows <- add_flow_length(flows) # filter by length flows <- filter_by_length(flows, length_min = 5000, length_max = 12000) #> Flows remaining after filtering: 96 (9.6%) # Add x, y, u, v coordinates to flows flows <- add_xyuv(flows) #> Extracting start and end coordinates from flow geometries... #> Adding x, y, u, v columns to flow data... #> Assigning unique flow IDs... # Calculate distance matrix distances <- flow_distance(flows, alpha = 1.5, beta = 0.5) #> Adding coordinates data back onto the unique pairs ... dmat <- distance_matrix(distances) # Generate weight vector w_vec <- weight_vector(dmat, flows, weight_col = \"count\")  # Define the parameters for sensitivity analysis options_epsilon <- seq(1, 10, by = 2) options_minpts <- seq(10, 100, by = 10) # # Run the sensitivity analysis results <- dbscan_sensitivity(   dist_mat = dmat,   flows = flows,   options_epsilon = options_epsilon,   options_minpts = options_minpts,   w_vec = w_vec ) #> running dbscan for option 1 of 50 : eps = 1 | minpts = 10 #> running dbscan for option 2 of 50 : eps = 1 | minpts = 20 #> running dbscan for option 3 of 50 : eps = 1 | minpts = 30 #> running dbscan for option 4 of 50 : eps = 1 | minpts = 40 #> running dbscan for option 5 of 50 : eps = 1 | minpts = 50 #> running dbscan for option 6 of 50 : eps = 1 | minpts = 60 #> running dbscan for option 7 of 50 : eps = 1 | minpts = 70 #> running dbscan for option 8 of 50 : eps = 1 | minpts = 80 #> running dbscan for option 9 of 50 : eps = 1 | minpts = 90 #> running dbscan for option 10 of 50 : eps = 1 | minpts = 100 #> running dbscan for option 11 of 50 : eps = 3 | minpts = 10 #> running dbscan for option 12 of 50 : eps = 3 | minpts = 20 #> running dbscan for option 13 of 50 : eps = 3 | minpts = 30 #> running dbscan for option 14 of 50 : eps = 3 | minpts = 40 #> running dbscan for option 15 of 50 : eps = 3 | minpts = 50 #> running dbscan for option 16 of 50 : eps = 3 | minpts = 60 #> running dbscan for option 17 of 50 : eps = 3 | minpts = 70 #> running dbscan for option 18 of 50 : eps = 3 | minpts = 80 #> running dbscan for option 19 of 50 : eps = 3 | minpts = 90 #> running dbscan for option 20 of 50 : eps = 3 | minpts = 100 #> running dbscan for option 21 of 50 : eps = 5 | minpts = 10 #> running dbscan for option 22 of 50 : eps = 5 | minpts = 20 #> running dbscan for option 23 of 50 : eps = 5 | minpts = 30 #> running dbscan for option 24 of 50 : eps = 5 | minpts = 40 #> running dbscan for option 25 of 50 : eps = 5 | minpts = 50 #> running dbscan for option 26 of 50 : eps = 5 | minpts = 60 #> running dbscan for option 27 of 50 : eps = 5 | minpts = 70 #> running dbscan for option 28 of 50 : eps = 5 | minpts = 80 #> running dbscan for option 29 of 50 : eps = 5 | minpts = 90 #> running dbscan for option 30 of 50 : eps = 5 | minpts = 100 #> running dbscan for option 31 of 50 : eps = 7 | minpts = 10 #> running dbscan for option 32 of 50 : eps = 7 | minpts = 20 #> running dbscan for option 33 of 50 : eps = 7 | minpts = 30 #> running dbscan for option 34 of 50 : eps = 7 | minpts = 40 #> running dbscan for option 35 of 50 : eps = 7 | minpts = 50 #> running dbscan for option 36 of 50 : eps = 7 | minpts = 60 #> running dbscan for option 37 of 50 : eps = 7 | minpts = 70 #> running dbscan for option 38 of 50 : eps = 7 | minpts = 80 #> running dbscan for option 39 of 50 : eps = 7 | minpts = 90 #> running dbscan for option 40 of 50 : eps = 7 | minpts = 100 #> running dbscan for option 41 of 50 : eps = 9 | minpts = 10 #> running dbscan for option 42 of 50 : eps = 9 | minpts = 20 #> running dbscan for option 43 of 50 : eps = 9 | minpts = 30 #> running dbscan for option 44 of 50 : eps = 9 | minpts = 40 #> running dbscan for option 45 of 50 : eps = 9 | minpts = 50 #> running dbscan for option 46 of 50 : eps = 9 | minpts = 60 #> running dbscan for option 47 of 50 : eps = 9 | minpts = 70 #> running dbscan for option 48 of 50 : eps = 9 | minpts = 80 #> running dbscan for option 49 of 50 : eps = 9 | minpts = 90 #> running dbscan for option 50 of 50 : eps = 9 | minpts = 100"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/distance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Long-Format Distance Tibble to Matrix — distance_matrix","title":"Convert Long-Format Distance Tibble to Matrix — distance_matrix","text":"Convert Long-Format Distance Tibble Matrix","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/distance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Long-Format Distance Tibble to Matrix — distance_matrix","text":"","code":"distance_matrix(distances, distance_col = \"fds\")"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/distance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Long-Format Distance Tibble to Matrix — distance_matrix","text":"distances tibble columns flow_ID_a, flow_ID_b, distance distance_col column name distance (default \"fds\")","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/distance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Long-Format Distance Tibble to Matrix — distance_matrix","text":"distance matrix (tibble rownames). matrix flow_ID_a rownames flow_ID_b column names. function converts output flow_distance() format suitable dbscan clustering algorithm.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/distance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Long-Format Distance Tibble to Matrix — distance_matrix","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows <- head(flows, 100) # for testing # Add flow lengths and coordinates flows <- add_flow_length(flows) flows <- add_xyuv(flows) #> Extracting start and end coordinates from flow geometries... #> Adding x, y, u, v columns to flow data... #> Assigning unique flow IDs... # Calculate distances distances <- flow_distance(flows, alpha = 1.5, beta = 0.5) #> Adding coordinates data back onto the unique pairs ... dmat <- distance_matrix(distances)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/filter_by_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Flows by Length — filter_by_length","title":"Filter Flows by Length — filter_by_length","text":"Filter Flows Length","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/filter_by_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Flows by Length — filter_by_length","text":"","code":"filter_by_length(x, length_min = 0, length_max = Inf)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/filter_by_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Flows by Length — filter_by_length","text":"x sf object length_m length_min minimum length (default 0) length_max maximum length (default Inf)","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/filter_by_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Flows by Length — filter_by_length","text":"filtered sf object. Flows length_m outside specified range removed.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/filter_by_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Flows by Length — filter_by_length","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows <- add_flow_length(flows) flows <- filter_by_length(flows, length_min = 5000, length_max = 12000) #> Flows remaining after filtering: 3237 (31.44%)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flow_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Flow Distance and Dissimilarity — flow_distance","title":"Calculate Flow Distance and Dissimilarity — flow_distance","text":"function calculates flow distance dissimilarity measures pairs flows based method described @tao2016spatial.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flow_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Flow Distance and Dissimilarity — flow_distance","text":"","code":"flow_distance(x, alpha = 1, beta = 1)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flow_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Flow Distance and Dissimilarity — flow_distance","text":"x tibble flow_ID, x, y, u, v, length_m alpha numeric, origin weight beta numeric, destination weight","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flow_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Flow Distance and Dissimilarity — flow_distance","text":"tibble OD pairs fd, fds columns","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flow_distance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Flow Distance and Dissimilarity — flow_distance","text":"Tao, R., Thill, J.-C., 2016. Spatial cluster detection spatial flow data. Geographical Analysis 48, 355–372. https://doi.org/10.1111/gean.12100","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flow_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Flow Distance and Dissimilarity — flow_distance","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows <- head(flows, 100) # for testing # Add flow lengths and coordinates flows <- add_flow_length(flows) flows <- add_xyuv(flows) #> Extracting start and end coordinates from flow geometries... #> Adding x, y, u, v columns to flow data... #> Assigning unique flow IDs... # Calculate distances distances <- flow_distance(flows, alpha = 1.5, beta = 0.5) #> Adding coordinates data back onto the unique pairs ..."},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flows_leeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Example flow data for Leeds. It is from the 2021 census, and it contains all Origin - Destination flows at the MSOA level. For more info on census flow data, see the ONS documentation See data-raw/flows_leeds.R for how this data was created. — flows_leeds","title":"Example flow data for Leeds. It is from the 2021 census, and it contains all Origin - Destination flows at the MSOA level. For more info on census flow data, see the ONS documentation See data-raw/flows_leeds.R for how this data was created. — flows_leeds","text":"Example flow data Leeds. 2021 census, contains Origin - Destination flows MSOA level. info census flow data, see ONS documentation See data-raw/flows_leeds.R data created.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flows_leeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example flow data for Leeds. It is from the 2021 census, and it contains all Origin - Destination flows at the MSOA level. For more info on census flow data, see the ONS documentation See data-raw/flows_leeds.R for how this data was created. — flows_leeds","text":"","code":"flows_leeds"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flows_leeds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example flow data for Leeds. It is from the 2021 census, and it contains all Origin - Destination flows at the MSOA level. For more info on census flow data, see the ONS documentation See data-raw/flows_leeds.R for how this data was created. — flows_leeds","text":"object class sf LINESTRING geometry. following columns: origin MSOA code origin zone destination MSOA code destination zone count number people moving origin destination geometry desire line origin destination","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flows_leeds.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example flow data for Leeds. It is from the 2021 census, and it contains all Origin - Destination flows at the MSOA level. For more info on census flow data, see the ONS documentation See data-raw/flows_leeds.R for how this data was created. — flows_leeds","text":"https://www.nomisweb.co.uk/sources/census_2021_od","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/weight_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Weight Vector from Flows — weight_vector","title":"Generate Weight Vector from Flows — weight_vector","text":"Generate Weight Vector Flows","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/weight_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Weight Vector from Flows — weight_vector","text":"","code":"weight_vector(dist_mat, x, weight_col = \"count\")"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/weight_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Weight Vector from Flows — weight_vector","text":"dist_mat distance matrix x flows tibble flow_ID weight_col weight_col column use weights (default = \"count\")","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/weight_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Weight Vector from Flows — weight_vector","text":"numeric weight vector. element corresponds flow distance matrix, used weight DBSCAN clustering algorithm.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/weight_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Weight Vector from Flows — weight_vector","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows <- head(flows, 100) # for testing # Add flow lengths and coordinates flows <- add_flow_length(flows) flows <- add_xyuv(flows) #> Extracting start and end coordinates from flow geometries... #> Adding x, y, u, v columns to flow data... #> Assigning unique flow IDs... # Calculate distances distances <- flow_distance(flows, alpha = 1.5, beta = 0.5) #> Adding coordinates data back onto the unique pairs ... dmat <- distance_matrix(distances) wvec <- weight_vector(dmat, flows, weight_col = \"count\")"},{"path":"https://hussein-mahfouz.github.io/flowcluster/news/index.html","id":"flowcluster-021","dir":"Changelog","previous_headings":"","what":"flowcluster 0.2.1","title":"flowcluster 0.2.1","text":"Fixed NOTEs CRAN submission correcting spelling DESCRIPTION, adding WORDLIST, simplifying long-running example aggregate_clustered_flows().","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/news/index.html","id":"flowcluster-020","dir":"Changelog","previous_headings":"","what":"flowcluster 0.2.0","title":"flowcluster 0.2.0","text":"Added aggregate_clustered_flows() create representative lines flow clusters. function calculates weighted unweighted centroid start end points flows cluster, returns sf object one line per cluster.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/news/index.html","id":"flowcluster-0109000","dir":"Changelog","previous_headings":"","what":"flowcluster 0.1.0.9000","title":"flowcluster 0.1.0.9000","text":"Added NEWS.md file track changes package.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/news/index.html","id":"flowcluster-010","dir":"Changelog","previous_headings":"","what":"flowcluster 0.1.0","title":"flowcluster 0.1.0","text":"CRAN release: 2025-07-05 Initial release. Published CRAN","code":""}]
