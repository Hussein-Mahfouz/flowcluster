[{"path":"https://hussein-mahfouz.github.io/flowcluster/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Hussein Mahfouz Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2025). flowcluster: Package (One Line, Title Case). R package version 0.0.0.9001, https://hussein-mahfouz.github.io/flowcluster/.","code":"@Manual{,   title = {flowcluster: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2025},   note = {R package version 0.0.0.9001},   url = {https://hussein-mahfouz.github.io/flowcluster/}, }"},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"flowcluster","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"goal flowcluster provide minimal functionality clustering OD desire lines (flows). includes: 1. Creating distance matrices OD pairs 2. Passing distance matrices clustering algorithm","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"install-from-github","dir":"","previous_headings":"","what":"Install from GitHub","title":"What the Package Does (One Line, Title Case)","text":"can install development version flowcluster GitHub : Load follows:","code":"# install.packages(\"devtools\") devtools::install_github(\"Hussein-Mahfouz/flowcluster\") library(flowcluster)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"What the Package Does (One Line, Title Case)","text":"package provides function create distance matrix data frame OD pairs, pass matrix clustering algorithm. current distance matrix implementation flow distance flow dissimilarity measures described (Tao Thill 2016).","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"data-preparation","dir":"","previous_headings":"Usage","what":"Data preparation","title":"What the Package Does (One Line, Title Case)","text":"First, load package sample data, project metric CRS. important accurate length calculations spatial operations. Next, add column containing length (meters) flow line. step also checks data projected CRS. Filter flows based minimum maximum length. , extract start end coordinates flow, assign unique IDs. needed subsequent distance calculations clustering.","code":"library(flowcluster) library(tidyverse) library(sf) library(tmap)  # Load sample flow data and project to metric CRS (e.g., EPSG:3857) flows_sf <- flows_leeds flows_sf <- st_transform(flows_sf, 3857) # Add length (meters) to each flow line flows_sf <- add_flow_length(flows_sf) head(flows_sf, 5) Simple feature collection with 5 features and 4 fields Geometry type: LINESTRING Dimension:     XY Bounding box:  xmin: -189882.9 ymin: 7148099 xmax: -149890.2 ymax: 7157033 Projected CRS: WGS 84 / Pseudo-Mercator # A tibble: 5 × 5   origin    destination count                               geometry length_m   <chr>     <chr>       <dbl>                       <LINESTRING [m]>    <dbl> 1 E02002330 E02002330      30 (-155678.3 7157033, -155678.3 7157033)       0  2 E02002330 E02002331     366 (-155678.3 7157033, -149890.2 7155611)    5960. 3 E02002330 E02002332       6 (-155678.3 7157033, -189882.9 7153431)   34394. 4 E02002330 E02002333       2 (-155678.3 7157033, -187947.5 7151336)   32768. 5 E02002330 E02002334      31 (-155678.3 7157033, -151100.3 7148099)   10039. # Filter flows based on length (e.g., between 100 and 10000 meters) flows_sf = filter_by_length(flows_sf, length_min = 1000, length_max = 20000) # Add start/end coordinates and unique flow IDs flows_sf <- add_xyuv(flows_sf) head(flows_sf, 5) Simple feature collection with 5 features and 9 fields Geometry type: LINESTRING Dimension:     XY Bounding box:  xmin: -166579.3 ymin: 7140540 xmax: -149890.2 ymax: 7157033 Projected CRS: WGS 84 / Pseudo-Mercator # A tibble: 5 × 10   origin    destination count                   geometry length_m       x      y   <chr>     <chr>       <dbl>           <LINESTRING [m]>    <dbl>   <dbl>  <dbl> 1 E02002330 E02002331     366 (-155678.3 7157033, -1498…    5960. -1.56e5 7.16e6 2 E02002330 E02002334      31 (-155678.3 7157033, -1511…   10039. -1.56e5 7.16e6 3 E02002330 E02002335      17 (-155678.3 7157033, -1636…   10832. -1.56e5 7.16e6 4 E02002330 E02002349       1 (-155678.3 7157033, -1665…   19770. -1.56e5 7.16e6 5 E02002330 E02002351       7 (-155678.3 7157033, -1603…   16882. -1.56e5 7.16e6 # ℹ 3 more variables: u <dbl>, v <dbl>, flow_ID <chr>"},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"distance-matrix-calculation","dir":"","previous_headings":"Usage","what":"Distance Matrix calculation","title":"What the Package Does (One Line, Title Case)","text":"Calculate pairwise distance measure flows using coordinates. can adjust alpha beta change weighting start end locations. Convert long-format distance table matrix, required clustering.","code":"# Compute pairwise flow distances (fd and fds columns) flows = st_drop_geometry(flows_sf) distances <- flow_distance(flows, alpha = 1, beta = 1) # Create a distance matrix from the long-form distance data. Choose the column for distances you want to use. # The 'fds' column is the flow dissimilarity measure, and the 'fd' column is the flow distance measure. dmat <- distance_matrix(distances, distance_col = \"fds\") # check 1st couple of rows columns of the distance matrix head(dmat[1:2, 1:2]) E02002330_1-E02002331_2 E02002330_1-E02002334_5 E02002330_1-E02002331_2               0.0000000               0.9836044 E02002330_1-E02002334_5               0.9836044               0.0000000"},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"clustering","dir":"","previous_headings":"Usage","what":"Clustering","title":"What the Package Does (One Line, Title Case)","text":"Prepare weight vector, typically based “count” column (number trips, etc). data “count” column, can add one flows$count <- 1. Weights handy, otherwise matrix huge, replicate OD pair n times depending number observations . Unfortunately, Finally, cluster flows using DBSCAN. Adjust eps minPts control cluster tightness minimum cluster size. Cluster composition greatly affected prameters.","code":"# Prepare weights for each flow (here we use the count column) wvec <- weight_vector(dmat, flows, weight_col = \"count\") # Cluster flows using DBSCAN flows_clustered <- cluster_flows_dbscan(dmat, wvec, flows, eps = 8, minPts = 70)  # View the first few rows of the clustered data head(flows_clustered, 10) # A tibble: 10 × 10    origin    destination count length_m        x        y       u      v flow_ID    <chr>     <chr>       <dbl>    <dbl>    <dbl>    <dbl>   <dbl>  <dbl> <chr>    1 E02002330 E02002331     366    5960. -155678. 7157033. -1.50e5 7.16e6 E02002…  2 E02002330 E02002334      31   10039. -155678. 7157033. -1.51e5 7.15e6 E02002…  3 E02002330 E02002335      17   10832. -155678. 7157033. -1.64e5 7.15e6 E02002…  4 E02002330 E02002349       1   19770. -155678. 7157033. -1.67e5 7.14e6 E02002…  5 E02002330 E02002351       7   16882. -155678. 7157033. -1.60e5 7.14e6 E02002…  6 E02002330 E02002358       5   19213. -155678. 7157033. -1.62e5 7.14e6 E02002…  7 E02002330 E02002359      10   19061. -155678. 7157033. -1.52e5 7.14e6 E02002…  8 E02002331 E02002330      19    5960. -149890. 7155611. -1.56e5 7.16e6 E02002…  9 E02002331 E02002334      61    7609. -149890. 7155611. -1.51e5 7.15e6 E02002… 10 E02002331 E02002335      17   14973. -149890. 7155611. -1.64e5 7.15e6 E02002… # ℹ 1 more variable: cluster <int> # how many unique clusters were found? length(unique(flows_clustered$cluster)) [1] 315 # number of flows in each cluster flows_clustered |>    group_by(cluster) |>    summarise(n = n()) |>    arrange(desc(n)) # A tibble: 315 × 2    cluster     n      <int> <int>  1       0  6607  2      33   157  3      16    61  4      55    27  5     262    20  6      24    19  7     188    17  8     162    16  9      30    14 10     189    13 # ℹ 305 more rows"},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"visualise","dir":"","previous_headings":"Usage","what":"Visualise","title":"What the Package Does (One Line, Title Case)","text":"Let’s take look clusters Add geometry back onto data","code":"# Keep only the biggest clusters for visualisation flows_clustered = flows_clustered |>   filter(cluster != 0) |> # these are normally the noisepoints   group_by(cluster) |>   mutate(size = n(),           count_cluster = sum(count)) |>   ungroup() |>   filter(size > 7, # minimum size of cluster          count_cluster > 100) # minumum number of trips in cluster # Add the geometry back onto the data flows_clustered = flows_sf |>   select(flow_ID) |>   inner_join(flows_clustered, by = \"flow_ID\") # plot  tm_shape(flows_clustered) +   tm_lines(lwd = \"count\",            col = \"cluster\",            palette = \"Accent\", #YlGn            #style = \"pretty\",            alpha = 1,            title.col = \"Cluster\",            title.lwd = \"No. of people\",            scale = 10,            legend.col.show = FALSE,            showNA = FALSE) +   tm_facets(by = \"cluster\",             free.coords = FALSE,             nrow = 4,             showNA = FALSE) +   tm_layout(fontfamily = 'Georgia',             main.title = paste0(\"Clustered flows\"),             main.title.size = 1.1,             main.title.color = \"azure4\",             main.title.position = \"left\",             legend.outside = TRUE,             legend.outside.position = \"bottom\",             legend.stack = \"horizontal\",             # remove panel headers             #panel.show = FALSE,             frame = FALSE) -> cluster_results  cluster_results"},{"path":"https://hussein-mahfouz.github.io/flowcluster/index.html","id":"future-work","dir":"","previous_headings":"","what":"Future Work","title":"What the Package Does (One Line, Title Case)","text":"Sensitivity function show clustering changes different eps minPts values Add distance matrices (e.g. Frechet distance) Add clustering algorithms, use efficient data structure workaround able use weights clustering algorithms","code":""},{"path":[]},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Unique IDs to Flows (internal) Internal helper for assigning unique IDs to flows based on spatial columns. Used by add_xyuv() — add_flow_ids","title":"Assign Unique IDs to Flows (internal) Internal helper for assigning unique IDs to flows based on spatial columns. Used by add_xyuv() — add_flow_ids","text":"Assign Unique IDs Flows (internal) Internal helper assigning unique IDs flows based spatial columns. Used add_xyuv()","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Unique IDs to Flows (internal) Internal helper for assigning unique IDs to flows based on spatial columns. Used by add_xyuv() — add_flow_ids","text":"","code":"add_flow_ids(x)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Unique IDs to Flows (internal) Internal helper for assigning unique IDs to flows based on spatial columns. Used by add_xyuv() — add_flow_ids","text":"x tibble origin, destination, x, y, u, v columns","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Unique IDs to Flows (internal) Internal helper for assigning unique IDs to flows based on spatial columns. Used by add_xyuv() — add_flow_ids","text":"tibble flow_ID column","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Length Column to Flow Data — add_flow_length","title":"Add Length Column to Flow Data — add_flow_length","text":"Also checks 'origin' 'destination' columns present.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Length Column to Flow Data — add_flow_length","text":"","code":"add_flow_length(x)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Length Column to Flow Data — add_flow_length","text":"x sf object flows (LINESTRING, projected CRS)","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Length Column to Flow Data — add_flow_length","text":"sf object length_m column","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_flow_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Length Column to Flow Data — add_flow_length","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows <- add_flow_length(flows)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_xyuv.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Start/End Coordinates & Flow IDs — add_xyuv","title":"Add Start/End Coordinates & Flow IDs — add_xyuv","text":"Add Start/End Coordinates & Flow IDs","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_xyuv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Start/End Coordinates & Flow IDs — add_xyuv","text":"","code":"add_xyuv(x)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_xyuv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Start/End Coordinates & Flow IDs — add_xyuv","text":"x sf object flows","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_xyuv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Start/End Coordinates & Flow IDs — add_xyuv","text":"tibble x, y, u, v, flow_ID columns","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/add_xyuv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Start/End Coordinates & Flow IDs — add_xyuv","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows <- add_flow_length(flows) flows <- add_xyuv(flows) #> Extracting start and end coordinates from flow geometries... #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE #> Adding x, y, u, v columns to flow data... #> Assigning unique flow IDs..."},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/cluster_flows_dbscan.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster Flows using DBSCAN — cluster_flows_dbscan","title":"Cluster Flows using DBSCAN — cluster_flows_dbscan","text":"Cluster Flows using DBSCAN","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/cluster_flows_dbscan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster Flows using DBSCAN — cluster_flows_dbscan","text":"","code":"cluster_flows_dbscan(dist_mat, w_vec, x, eps, minPts)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/cluster_flows_dbscan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster Flows using DBSCAN — cluster_flows_dbscan","text":"dist_mat distance matrix w_vec weight vector x flows tibble flow_ID eps DBSCAN epsilon parameter minPts DBSCAN minPts parameter","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/cluster_flows_dbscan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster Flows using DBSCAN — cluster_flows_dbscan","text":"flows tibble cluster column","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/cluster_flows_dbscan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster Flows using DBSCAN — cluster_flows_dbscan","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows = head(flows, 100) # for testing # Add flow lengths and coordinates flows <- add_flow_length(flows) # filter by length flows <- filter_by_length(flows, length_min = 5000, length_max = 12000) #> Flows remaining after filtering: 5 (5%) flows <- add_xyuv(flows) #> Extracting start and end coordinates from flow geometries... #> Adding x, y, u, v columns to flow data... #> Assigning unique flow IDs... # Calculate distances distances <- flow_distance(flows, alpha = 1.5, beta = 0.5) #> Adding coordinates data back onto the unique pairs ... dmat <- distance_matrix(distances) wvec <- weight_vector(dmat, flows, weight_col = \"count\") clustered <- cluster_flows_dbscan(dmat, wvec, flows, eps = 8, minPts = 70)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/distance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Long-Format Distance Tibble to Matrix — distance_matrix","title":"Convert Long-Format Distance Tibble to Matrix — distance_matrix","text":"Convert Long-Format Distance Tibble Matrix","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/distance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Long-Format Distance Tibble to Matrix — distance_matrix","text":"","code":"distance_matrix(distances, distance_col = \"fds\")"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/distance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Long-Format Distance Tibble to Matrix — distance_matrix","text":"distances tibble columns flow_ID_a, flow_ID_b, distance distance_col column name distance (default \"fds\")","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/distance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Long-Format Distance Tibble to Matrix — distance_matrix","text":"distance matrix (tibble rownames)","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/distance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Long-Format Distance Tibble to Matrix — distance_matrix","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows = head(flows, 100) # for testing # Add flow lengths and coordinates flows <- add_flow_length(flows) flows <- add_xyuv(flows) #> Extracting start and end coordinates from flow geometries... #> Adding x, y, u, v columns to flow data... #> Assigning unique flow IDs... # Calculate distances distances <- flow_distance(flows, alpha = 1.5, beta = 0.5) #> Adding coordinates data back onto the unique pairs ... dmat <- distance_matrix(distances)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/filter_by_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Flows by Length — filter_by_length","title":"Filter Flows by Length — filter_by_length","text":"Filter Flows Length","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/filter_by_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Flows by Length — filter_by_length","text":"","code":"filter_by_length(x, length_min = 0, length_max = Inf)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/filter_by_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Flows by Length — filter_by_length","text":"x sf object length_m length_min minimum length (default 0) length_max maximum length (default Inf)","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/filter_by_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Flows by Length — filter_by_length","text":"filtered sf object","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/filter_by_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Flows by Length — filter_by_length","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows <- add_flow_length(flows) flows <- filter_by_length(flows, length_min = 5000, length_max = 12000) #> Flows remaining after filtering: 3237 (31.44%)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flow_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Flow Distance and Dissimilarity based on Tao and Thill, 2017 — flow_distance","title":"Calculate Flow Distance and Dissimilarity based on Tao and Thill, 2017 — flow_distance","text":"Calculate Flow Distance Dissimilarity based Tao Thill, 2017","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flow_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Flow Distance and Dissimilarity based on Tao and Thill, 2017 — flow_distance","text":"","code":"flow_distance(x, alpha = 1, beta = 1)"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flow_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Flow Distance and Dissimilarity based on Tao and Thill, 2017 — flow_distance","text":"x tibble flow_ID, x, y, u, v, length_m alpha numeric, origin weight beta numeric, destination weight","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flow_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Flow Distance and Dissimilarity based on Tao and Thill, 2017 — flow_distance","text":"tibble OD pairs fd, fds columns","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flow_distance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Flow Distance and Dissimilarity based on Tao and Thill, 2017 — flow_distance","text":"Tao, R., Thill, J.-C., 2016. Spatial cluster detection spatial flow data. Geographical Analysis 48, 355–372. https://doi.org/10.1111/gean.12100","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flow_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Flow Distance and Dissimilarity based on Tao and Thill, 2017 — flow_distance","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows = head(flows, 100) # for testing # Add flow lengths and coordinates flows <- add_flow_length(flows) flows <- add_xyuv(flows) #> Extracting start and end coordinates from flow geometries... #> Adding x, y, u, v columns to flow data... #> Assigning unique flow IDs... # Calculate distances distances <- flow_distance(flows, alpha = 1.5, beta = 0.5) #> Adding coordinates data back onto the unique pairs ..."},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flows_leeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Example flow data for Leeds. It is from the 2021 census, and it contains all Origin - Destination flows at the MSOA level. For more info on census flow data, see the ONS documentation See data-raw/flows_leeds.R for how this data was created. — flows_leeds","title":"Example flow data for Leeds. It is from the 2021 census, and it contains all Origin - Destination flows at the MSOA level. For more info on census flow data, see the ONS documentation See data-raw/flows_leeds.R for how this data was created. — flows_leeds","text":"Example flow data Leeds. 2021 census, contains Origin - Destination flows MSOA level. info census flow data, see ONS documentation See data-raw/flows_leeds.R data created.","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flows_leeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example flow data for Leeds. It is from the 2021 census, and it contains all Origin - Destination flows at the MSOA level. For more info on census flow data, see the ONS documentation See data-raw/flows_leeds.R for how this data was created. — flows_leeds","text":"","code":"flows_leeds"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flows_leeds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example flow data for Leeds. It is from the 2021 census, and it contains all Origin - Destination flows at the MSOA level. For more info on census flow data, see the ONS documentation See data-raw/flows_leeds.R for how this data was created. — flows_leeds","text":"object class sf LINESTRING geometry. following columns: origin MSOA code origin zone destination MSOA code destination zone count number people moving origin destination geometry desire line origin destination","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/flows_leeds.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example flow data for Leeds. It is from the 2021 census, and it contains all Origin - Destination flows at the MSOA level. For more info on census flow data, see the ONS documentation See data-raw/flows_leeds.R for how this data was created. — flows_leeds","text":"https://www.nomisweb.co.uk/sources/census_2021_od","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/weight_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Weight Vector from Flows — weight_vector","title":"Generate Weight Vector from Flows — weight_vector","text":"Generate Weight Vector Flows","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/weight_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Weight Vector from Flows — weight_vector","text":"","code":"weight_vector(dist_mat, x, weight_col = \"count\")"},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/weight_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Weight Vector from Flows — weight_vector","text":"dist_mat distance matrix x flows tibble flow_ID weight_col weight_col column use weights (default = \"count\")","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/weight_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Weight Vector from Flows — weight_vector","text":"numeric weight vector","code":""},{"path":"https://hussein-mahfouz.github.io/flowcluster/reference/weight_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Weight Vector from Flows — weight_vector","text":"","code":"flows <- sf::st_transform(flows_leeds, 3857) flows = head(flows, 100) # for testing # Add flow lengths and coordinates flows <- add_flow_length(flows) flows <- add_xyuv(flows) #> Extracting start and end coordinates from flow geometries... #> Adding x, y, u, v columns to flow data... #> Assigning unique flow IDs... # Calculate distances distances <- flow_distance(flows, alpha = 1.5, beta = 0.5) #> Adding coordinates data back onto the unique pairs ... dmat <- distance_matrix(distances) wvec <- weight_vector(dmat, flows, weight_col = \"count\")"}]
